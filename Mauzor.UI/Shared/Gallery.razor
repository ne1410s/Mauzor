@using FullStack.Av.Domain
@using FullStack.Crypto;
@using Mauzor.UI.Shared
@using System.IO
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@using Microsoft.Maui.Essentials

@inject ILogger<Gallery> logger;

<div>
    <select title="view mode" @bind="viewMode">
        <option value="@GalleryViewMode.DetailList">Detail list</option>
        <option value="@GalleryViewMode.SmallIcons">Small icons</option>
        <option value="@GalleryViewMode.LargeIcons">Large icons</option>
    </select>
</div>

<div>
    <input type="button" title="up" @onclick="NavigateUp" disabled="@(!CanNavigateUp)" value=".." />
    <input type="button" title="refresh" @onclick="() => Navigate(currentDir)" value="↻" />
    <input type="button" title="import" @onclick="ImportFiles" value="↦" />
    <span>@currentDir.Name</span>
</div>

<div class="gallery @AuxClasses">
    <ListView @ref="listControl" T="FileSystemInfo" Items="items" Orientation="orientation" SelectionChanged="fsi => selectedFile = fsi as FileInfo">
        <ItemTemplate Context="item">
            <GalleryItem ViewMode="@viewMode" Info="item" OnDoubleClick="ItemDoubleClicked" />
        </ItemTemplate>
    </ListView>
</div>

<div>
    <input type="button" title="encrypt" @onclick="EncryptSelection" disabled="@(!CanEncryptSelection)" value="🔒" />
</div>

<FilePreview File="selectedFile"/>

@code {

    private GalleryViewMode viewMode = GalleryViewMode.DetailList;

    private DirectoryInfo currentDir = null!;
    private List<FileSystemInfo> items = new List<FileSystemInfo>();
    private ListView<FileSystemInfo> listControl = null!;
    private FileInfo? selectedFile;

    private string AuxClasses => viewMode switch
    {
        GalleryViewMode.LargeIcons => "large",
        GalleryViewMode.DetailList => "small detail",
        _ => "small"
    };

    private ListOrientation orientation => viewMode switch
    {
        GalleryViewMode.DetailList => ListOrientation.Vertical,
        _ => ListOrientation.Horizontal,
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var specialFolder = Environment.SpecialFolder.MyDocuments;
        var specialPath = Environment.GetFolderPath(specialFolder);
        var specialDirInfo = new DirectoryInfo(specialPath);
        var appMediaFiles = specialDirInfo.CreateSubdirectory("mauzor");

        Navigate(appMediaFiles);
    }

    private void Navigate(DirectoryInfo dir)
    {
        currentDir = dir;
        listControl?.ClearSelection();
        items.Clear();

        var folderOptions = new EnumerationOptions { IgnoreInaccessible = true };
        items.AddRange(dir.GetDirectories("*", folderOptions));
        items.AddRange(dir.EnumerateMedia(recursive: false));
    }

    private async Task ImportFiles()
    {
        var files = await InteropExtensions.PickMediaAsync(false);
        foreach (var file in files)
        {
            var fi = new FileInfo(file.FullPath);
            fi.Encrypt(new byte[] { 1, 33, 1, 44 });
            fi.MoveTo(Path.Combine(currentDir.FullName, fi.Name));
        }

        Navigate(currentDir);
    }


    private void ItemDoubleClicked(FileSystemInfo info)
    {
        if (info is FileInfo fi)
        {

        }
        else if (info is DirectoryInfo di)
        {
            Navigate(di);
        }
    }

    private bool CanNavigateUp => currentDir.Parent != null;
    private void NavigateUp()
    {
        Navigate(currentDir.Parent!);
    }

    private bool CanEncryptSelection => selectedFile != null && !selectedFile.IsSecure();
    private void EncryptSelection()
    {
        selectedFile!.Encrypt(new byte[] { 1, 33, 1, 44 });
        Navigate(currentDir);
    }
}
